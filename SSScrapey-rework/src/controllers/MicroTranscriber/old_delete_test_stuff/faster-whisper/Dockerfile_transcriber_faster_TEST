############################################################
#                                                          #
#                        DOCKER BUILD                      #
#                                                          #
############################################################
# Docker build
# docker build --build-arg ENV_TYPE=dev  --no-cache -t cbrodski/transcriber:faster_test -f Dockerfile_transcriber_faster_TEST  .
# docker push cbrodski/transcriber:faster_test

# Docker run (local)
#    docker run --env-file .env -e ENV=dev cbrodski/transcriber:faster_test 


    
############################################################
#                                                          #
#                     VAST AI COMMANDS                     #
#                                                          #
############################################################
# Vast AI Search:
#     python .\vast search offers --order=inet_down_cost --on-demand 'dph < 0.12  cuda_vers >= 12  cpu_ram > 16 inet_down_cost < 0.2 disk_space > 22'

# Vasi AI Create:
#    vastai create instance 6479528 --image cbrodski/audio2text:latest --disk 23

# Vast AI SSH
#    ssh -p 40299 root@75.191.38.75 -L 8080:localhost:8080 -i "C:\Users\BrodskiTheGreat\Desktop\desktop\Code\vult-ssh"
#    ssh -p 38758 root@ssh5.vast.ai -L 8080:localhost:8080 -i "C:\Users\BrodskiTheGreat\Desktop\desktop\Code\vult-ssh"
#    ssh -p 40717 root@199.195.151.121 -L 8080:localhost:8080 -i "C:\Users\BrodskiTheGreat\Desktop\desktop\Code\vult-ssh"
#    ssh -p 50959 root@213.181.122.2 -L 8080:localhost:8080 -i "C:\Users\BrodskiTheGreat\Desktop\desktop\Code\vult-ssh"
#    ssh -p 32863 root@172.81.127.5 -L 8080:localhost:8080 -i "C:\Users\BrodskiTheGreat\Desktop\desktop\Code\vult-ssh"


# Deploy
# 1. Go to Vast AI Console:
# 2. Docker Run: use docker ENTRYPOINT. 
# 3. -e AWS_SECRET_ACCESS_KEY='xxxxxxxxxxx' -e AWS_ACCESS_KEY_ID='xxxxxxxxxx' -e DATABASE_HOST='xxxxxxxxxxx' -e DATABASE_USERNAME='xxxxxxxxxxxxx' -e DATABASE_PASSWORD='xxxxxxxxxxx' -e DATABASE='idontfront-dev'


############################################################
FROM nvidia/cuda:12.0.1-runtime-ubuntu20.04 

# Arguments
ARG ENV_TYPE=dev
ENV ENV=${ENV_TYPE}

##########
# Python #
##########
WORKDIR /app
RUN apt update \
    && apt-get update \
    && apt install curl  -y \
    && apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev -y \
    && curl https://www.python.org/ftp/python/3.10.10/Python-3.10.10.tgz -o Python-3.10.10.tgz \
    && tar -xzf Python-3.10.10.tgz \
    && cd Python-3.10.10/ \
    && ./configure --enable-optimizations --with-ensurepip=install \
    && make -j $(nproc) \
    && make altinstall \
    && ln -s /usr/local/bin/python3.10 /usr/local/bin/python \
    && cd .. \
    && rm Python-3.10.10.tgz 


#######
# Pip #
#######    
WORKDIR /app
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
    && python get-pip.py pip==23.0.1 \
    && pip --version \
    && rm get-pip.py 


###########
# Project #
###########
WORKDIR /app
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata 
RUN apt install git -y \
    && git clone https://github.com/Brodski/scraper-dl-vids.git 
   
#########
# MYSQL #
#########
WORKDIR /app
RUN apt-get install -y pkg-config \ 
    && apt-get install -y gcc libmysqlclient-dev

####################
# Pip Dependencies #
####################
WORKDIR /app/scraper-dl-vids/SSScrapey-rework
RUN if [ "${ENV}" = "dev" ]; then \
        git fetch origin dev && \
        git checkout dev && \
        git reset --hard origin/dev && \
        git pull origin dev --force; \
    else \
        git reset --hard origin/master ; \
        git pull origin master --force ; \
        echo "Running in production mode" ; \
    fi
RUN pip install -r requirements_transcriber_faster.txt 


#########
# cuDNN #
#########
WORKDIR /app
COPY cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb . 
# ^ copy in my cbrodski google drive
# RUN curl 'https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.1/local_installers/12.x/cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb/' \
#     -H 'cookie: AMCV_F207D74D549850760A4C98C6%40AdobeOrg=1176715910%7CMCMID%7C71794017538113168927256794386408995986%7CMCAID%7CNONE%7CvVersion%7C5.4.0; at_check=true; nvweb_A=3a20aa19-c4d1-4220-aa0c-4e3417062d0d; nv_country_code=US; nvidiaCart={"cart":[],"lastAction":null}; s_fid=3A0A7C8FDD401624-389B99CDF8EF59F0; SESSls=gseo; SESSlsd=https%3A%2F%2Fwww.google.com%2F; SESSloginhint=cbrodski%40gmail.com; SESSauthn=1; nvweb_E=Ng0muRbpGfwOlHdK11fODOxuBWW-xjsvDS9pwvBA6M6BTDMUS2X5Py3WvbzbBWIxaalcbe9oUzfKUzzkHOX7Yg; nvweb_S=77SfVgBdKv2IUdfq0Ta6rsUNgJFeD5eXW26lD3BmW3nRBjQUseguZchvA_2fylO8eCa4bSe4HtAdtU3-vA747Q; remember_user_token=eyJfcmFpbHMiOnsibWVzc2FnZSI6Ilcxc3pOak00TlRBd1hTd2laWEJhUlVNMWNHTXRjM2g0TFY5WFdWRm1OM1FpTENJeE5qZ3pNalkyTXpreExqVXlOek01T0NKZCIsImV4cCI6IjIwMjMtMDUtMTlUMDU6NTk6NTEuNTI3WiIsInB1ciI6ImNvb2tpZS5yZW1lbWJlcl91c2VyX3Rva2VuIn19--6e4d0e90a73dae9c6c4de73c96594d3112f0cb5a; _devzone_session=c3f0c67e57d0c1dc8b76c908a47deee2; SSESS2088448faf607a381892ca97487fa4c7=OgiRpvCKlv11kRU4V4mjNQk0e9SGrua9nSbVEEuLpRU; OptanonConsent=isIABGlobal=false&datestamp=Fri+May+05+2023+01%3A08%3A50+GMT-0600+(Mountain+Daylight+Time)&version=6.23.0&hosts=&consentId=2594bb82-8cee-4b85-b314-a83e40044968&interactionCount=1&landingPath=NotLandingPage&groups=C0001%3A1%2CC0002%3A0%2CC0004%3A0%2CC0003%3A0&AwaitingReconsent=false; mbox=PC#94bacd6001d54eec8f98820bb1a81072.35_0#1746515331|session#05995f980d7c4749a90c107ac01baaba#1683272391' \
#     -H 'dnt: 1' \
#     -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36' \
#     --compressed \
#     -L --output cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb 
RUN dpkg -i cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb  
RUN apt install ./cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb 
RUN cp /var/cudnn-local-repo-*/cudnn-local-*-keyring.gpg /usr/share/keyrings/
RUN apt-get update
RUN apt-get install libcudnn8=8.9.1.23-1+cuda12.1 -y
RUN apt-get install libcudnn8-dev=8.9.1.23-1+cuda12.1 -y 
RUN rm cudnn-local-repo-debian11-8.9.1.23_1.0-1_amd64.deb 


# https://github.com/NVIDIA/nvidia-docker/issues/1644
# Apparently ^ fixes old version.
# RUN echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
# ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib/python3.10/site-packages/nvidia/cudnn/lib/"
# ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda-12.0/targets/x86_64-linux/lib/"
RUN echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"


######################
# VASTI AI ENDING IT #
######################
RUN pip install vastai==0.1.8 
# ! Below commands doesnt working anymore. Env var at CMD now
#     cat ~/.ssh/authorized_keys | md5sum | awk '{print $1}' > ssh_key_hv ; \
#     echo -n $VAST_CONTAINERLABEL | md5sum | awk '{print $1}' > instance_id_hv ; \
#     head -c -1 -q ssh_key_hv instance_id_hv > ~/.vast_api_key ;

# COPY cacert-2023-08-22.pem /app/scraper-dl-vids/SSScrapey-rework/cacert-2023-08-22.pem

WORKDIR /app/scraper-dl-vids/SSScrapey-rework
COPY dock_setup.sh dock_setup.sh
RUN chmod +x dock_setup.sh

CMD echo "NOT DONE!!!!!!!!!!!!" ; \
    vastai set api-key $VAST_API_KEY ; \
    sh dock_setup.sh ; \
    echo "VAST_API_KEY is $VAST_API_KEY " ; \
    echo "CONTAINER_API_KEY is $CONTAINER_API_KEY " ; \
    echo "running......." ; \
    python kickTranscriber.py ; \
    echo "DONE!!!!!!!!!!!!x" ; \
    sleep 90 ; \
    echo "DONE!!!!!!!!!!!!" ; \
    echo "DONE!!!!!!!!!!!!" ; \
    vastai destroy instance $CONTAINER_ID